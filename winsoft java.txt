1. public class MergeArrays {
    
    static void mergeArrays(int[] X, int[] Y, int m, int n) {
        int i = m - 1;
        int j = n - 1;
        int k = m + n - 1;

        while (i >= 0 && j >= 0) {
            if (X[i] > Y[j]) {
                X[k--] = X[i--];
            } else {
                X[k--] = Y[j--];
            }
        }

        
        while (j >= 0) {
            X[k--] = Y[j--];
        }
    }

    public static void main(String[] args) {
        int[] X = { 0, 2, 0, 3, 0, 5, 6, 0, 0 };
        int[] Y = { 1, 8, 9, 10, 15 };
        int m = X.length;
        int n = Y.length;

        mergeArrays(X, Y, m - n, n);

        System.out.println("Merged array: " + Arrays.toString(X));
    }
}
2. public class MaximumSumPath {

    static int maxSumPath(int[] X, int[] Y) {
        int sumX = 0, sumY = 0, result = 0;
        int i = 0, j = 0;

        while (i < X.length || j < Y.length) {
            if (i < X.length && (j == Y.length || X[i] < Y[j])) {
                sumX += X[i++];
            } else if (j < Y.length && (i == X.length || X[i] > Y[j])) {
                sumY += Y[j++];
            } else {
                result += Math.max(sumX, sumY) + X[i];
                sumX = sumY = 0;
                i++;
                j++;
            }
        }
        return result + Math.max(sumX, sumY);
    }

    public static void main(String[] args) {
        int[] X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 };
        int[] Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 };

        System.out.println("Maximum sum path is: " + maxSumPath(X, Y));
    }
}

3.import java.util.HashMap;

public class WordCount {
    
    static HashMap<String, Integer> countWords(String str) {
        HashMap<String, Integer> wordCountMap = new HashMap<>();
        
      
        String[] words = str.split("\\s+");
        
        
        for (String word : words) {
            wordCountMap.put(word, wordCountMap.getOrDefault(word, 0) + 1);
        }
        
        return wordCountMap;
    }

    public static void main(String[] args) {
        String inputString = "This is a sample string. This string contains sample words.";
        
        HashMap<String, Integer> wordCountMap = countWords(inputString);
        
   
        System.out.println("Word Counts:");
        for (String word : wordCountMap.keySet()) {
            System.out.println(word + ": " + wordCountMap.get(word));
        }
    }
}

4.public class DuplicateCharacters {
    
    static void findDuplicateCharacters(String str) {
        HashMap<Character, Integer> charCountMap = new HashMap<>();
        
       
        for (char c : str.toCharArray()) {
            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);
        }
        
       
        System.out.println("Duplicate characters in the string:");
        for (char c : charCountMap.keySet()) {
            if (charCountMap.get(c) > 1) {
                System.out.println(c);
            }
        }
    }

    public static void main(String[] args) {
        String inputString = "Hello World";
        findDuplicateCharacters(inputString);
    }
}