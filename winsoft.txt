1. using System;

class Program
{
    static int[] ReplaceWithRank(int[] arr)
    {
        var sortedArr = arr.OrderBy(x => x).ToArray();
        return arr.Select(x => Array.IndexOf(sortedArr, x) + 1).ToArray();
    }

    static void Main(string[] args)
    {
        int[] inputArr = { 10, 8, 15, 12, 6, 20, 1 };
        int[] outputArr = ReplaceWithRank(inputArr);
        Console.WriteLine("Output: { " + string.Join(", ", outputArr) + " }");
    }
}

2.using System;
using System.Collections.Generic;

class Program
{
    static int LengthOfLongestSubstring(string s)
    {
        int n = s.Length;
        int maxLength = 0;
        Dictionary<char, int> charIndexMap = new Dictionary<char, int>();

        int left = 0;
        for (int right = 0; right < n; right++)
        {
            if (charIndexMap.ContainsKey(s[right]))
            {
                left = Math.Max(left, charIndexMap[s[right]] + 1);
            }
            charIndexMap[s[right]] = right;
            maxLength = Math.Max(maxLength, right - left + 1);
        }

        return maxLength;
    }

    static void Main(string[] args)
    {
        string s1 = "abcabcbb";
        Console.WriteLine($"Output for '{s1}' is: {LengthOfLongestSubstring(s1)}");

        string s2 = "bbbbb";
        Console.WriteLine($"Output for '{s2}' is: {LengthOfLongestSubstring(s2)}");

        string s3 = "pwwkew";
        Console.WriteLine($"Output for '{s3}' is: {LengthOfLongestSubstring(s3)}");
    }
}

3. using System;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        string input = "hello world";
        var nonRepeatingChars = input.GroupBy(c => c).Where(g => g.Count() == 1).Select(g => g.Key);

        Console.WriteLine("Non-repeating characters:");
        foreach (char c in nonRepeatingChars)
        {
            Console.WriteLine(c);
        }
    }
}

4.using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        int[] numbers = { 1, 2, 2, 3, 3, 3, 4, 4, 4, 4 };
        Dictionary<int, int> frequencyMap = new Dictionary<int, int>();

        foreach (int num in numbers)
        {
            if (!frequencyMap.ContainsKey(num))
            {
                frequencyMap[num] = 0;
            }
            frequencyMap[num]++;
        }
        foreach (var kvp in frequencyMap)
        {
            Console.WriteLine($"Element: {kvp.Key}, Frequency: {kvp.Value}");
        }
    }
}